blueprint:
  name: HomeGlo Smart Switch Control
  description: >
    Control lights with HomeGlo adaptive lighting using ZHA switch events.
    Maps switch button presses to HomeGlo primitives.
    
    Button mappings:
    - ON button single press: Toggle HomeGlo on/off based on light state
    - OFF button single press: Reset to current time and enable HomeGlo
    - UP button single press: Step up brightness along adaptive curve
    - DOWN button single press: Step down brightness along adaptive curve
  domain: automation
  input:
    switch_device:
      name: Switch Device(s)
      description: The switch device(s) to use for controlling lights
      selector:
        device:
          multiple: true
    target_areas:
      name: Target Areas
      description: The area(s) to control when buttons are pressed
      selector:
        area:
          multiple: true

mode: restart
max_exceeded: silent

trigger:
  # ON button single press from any switch
  - platform: event
    event_type: zha_event
    event_data:
      command: "on_press"
    id: on_press
  
  # OFF button single press from any switch
  - platform: event
    event_type: zha_event
    event_data:
      command: "off_press"
    id: off_press
  
  # UP button single press from any switch
  - platform: event
    event_type: zha_event
    event_data:
      command: "up_press"
    id: up_press
  
  # DOWN button single press from any switch
  - platform: event
    event_type: zha_event
    event_data:
      command: "down_press"
    id: down_press

variables:
  areas: !input target_areas
  switches: !input switch_device

action:
  # Only proceed if the event came from one of our configured switches
  - condition: template
    value_template: >
      {% set switch_list = switches if switches is list else [switches] %}
      {{ trigger.event.data.device_id in switch_list }}
  - choose:
      # ON button: Toggle HomeGlo based on light state
      - conditions:
          - condition: trigger
            id: on_press
        sequence:
          - choose:
              # If any lights are on in the area, turn them off and disable HomeGlo
              - conditions:
                  - condition: template
                    value_template: >
                      {% set area_list = areas if areas is list else [areas] %}
                      {% set ns = namespace(lights_on = false) %}
                      {% for area_name in area_list %}
                        {% set lights = states.light | selectattr('entity_id', 'in', area_entities(area_name)) | list %}
                        {% if lights | selectattr('state', 'eq', 'on') | list | length > 0 %}
                          {% set ns.lights_on = true %}
                        {% endif %}
                      {% endfor %}
                      {{ ns.lights_on }}
                sequence:
                  - repeat:
                      for_each: "{{ areas if areas is list else [areas] }}"
                      sequence:
                        - service: light.turn_off
                          data:
                            transition: 1
                          target:
                            area_id: "{{ repeat.item }}"
                        - service: homeglo.homeglo_off
                          data:
                            area_id: "{{ repeat.item }}"
              # If all lights are off, enable HomeGlo (which turns them on with adaptive lighting)
              - conditions:
                  - condition: template
                    value_template: >
                      {% set area_list = areas if areas is list else [areas] %}
                      {% set ns = namespace(all_lights_off = true) %}
                      {% for area_name in area_list %}
                        {% set lights = states.light | selectattr('entity_id', 'in', area_entities(area_name)) | list %}
                        {% if lights | selectattr('state', 'eq', 'on') | list | length > 0 %}
                          {% set ns.all_lights_off = false %}
                        {% endif %}
                      {% endfor %}
                      {{ ns.all_lights_off }}
                sequence:
                  - repeat:
                      for_each: "{{ areas if areas is list else [areas] }}"
                      sequence:
                        - service: homeglo.homeglo_on
                          data:
                            area_id: "{{ repeat.item }}"
      
      # OFF button: Reset
      - conditions:
          - condition: trigger
            id: off_press
        sequence:
          - repeat:
              for_each: "{{ areas if areas is list else [areas] }}"
              sequence:
                - service: homeglo.reset
                  data:
                    area_id: "{{ repeat.item }}"
      
      # UP button: Step up
      - conditions:
          - condition: trigger
            id: up_press
        sequence:
          - service: homeglo.step_up
            data:
              area_id: "{{ areas }}"
      
      # DOWN button: Step down
      - conditions:
          - condition: trigger
            id: down_press
        sequence:
          - service: homeglo.step_down
            data:
              area_id: "{{ areas }}"